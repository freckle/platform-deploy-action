description: Deploy using the Freckle Platform CLI
inputs:
  platform-version:
    description: Version of Platform CLI to install
    required: true
    default: latest
  platform-suffix:
    description: OS-specific suffix for Platform package archive
    required: true
    default: x86_64-linux
  app-directory:
    description: Directory containing the App's .platform
    required: true
    default: "."
  app-resource:
    description: --resource option
    required: true
    default: ""
  environment:
    description: Environment to deploy (default prod)
    required: true
    default: prod
  deploy-tag:
    description: Tag to deploy (default is github.sha)
    required: true
    default: ""
  notify:
    description: Notify Slack? Requires SLACK_WEBHOOK in env
    required: true
    default: 'true'
outputs: {}
runs:
  using: composite
  steps:
    - uses: freckle/setup-platform-action@v4
      with:
        version: ${{ inputs.platform-version }}
        suffix: ${{ inputs.platform-suffix }}
    - shell: bash
      run: |
        options=( --environment '${{ inputs.environment }}' )

        # Check if we support --color
        if platform --color always version &>/dev/null; then
          options+=( --color always )
        fi

        if [[ -n '${{ inputs.app-resource }}' ]]; then
          options+=( --resource '${{ inputs.app-resource }}' )
        fi

        tag=${{ inputs.deploy-tag }}
        tag=${tag:-${{ github.sha }}}

        options+=( deploy --tag "$tag" --no-confirm )

        cd '${{ inputs.app-directory }}'
        platform "${options[@]}"

    - uses: 8398a7/action-slack@v3
      with:
        status: custom
        fields: workflow,job,commit,repo,took
        custom_payload: |
          {
            attachments: [{
              color: '${{ job.status }}' === 'success' ? 'good' : '${{ job.status }}' === 'failure' ? 'danger' : 'warning',
              text: `${process.env.AS_WORKFLOW}\n${process.env.AS_JOB} (${process.env.AS_COMMIT}) of ${process.env.AS_REPO} ${{ job.status }} in ${process.env.AS_TOOK} (cc:${{ github.actor }})`,
            }]
          }
      if: ${{ always() && inputs.notify == 'true' }}
